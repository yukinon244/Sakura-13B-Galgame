name: Pack Python to EXE

on:
  workflow_dispatch: # allows manual triggering
    inputs:
      create_release:
        description: 'Create new release'
        required: true
        type: boolean
  push:
    branches:
      - master
    paths: ['.github/workflows/**', '**/*.py']
  pull_request:
    types: [opened, synchronize, reopened]
    paths: ['**/*.py']

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  GGML_NLOOP: 3
  GGML_N_THREADS: 1

jobs:
  windows-latest-cmake-cublas:
    runs-on: windows-latest

    strategy:
      matrix:
        # cuda: ['12.1.0', '11.8.0']
        cuda: ['11.8.0']
        build: ['cublas']
        include:
          # - alias: '121'
          #   cuda: '12.1.0'
          - alias: '118'
            cuda: '11.8.0'

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: Jimver/cuda-toolkit@v0.2.11
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda }}
          method: 'local'
          # sub-packages: '["nvcc", "cudart", "cublas", "cublas_dev", "thrust", "visual_studio_integration"]'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python Environment
        id: pyenv
        run: |
          python -m pip install --upgrade pip
          python -m pip install torch==2.1.0+cu${{ matrix.alias }} --index-url https://download.pytorch.org/whl/cu${{ matrix.alias }}
          python -m pip install auto-gptq --extra-index-url https://huggingface.github.io/autogptq-index/whl/cu118/
          python -m pip install llama-cpp-python --prefer-binary --extra-index-url=https://jllllll.github.io/llama-cpp-python-cuBLAS-wheels/AVX2/cu${{ matrix.alias }}
          python -m pip install -r requirements/actions.txt
          python -m pip install pyinstaller

      - name: Build
        id: pyinstaller_build
        shell: powershell
        run: |
          pyinstaller --clean --noconfirm server.spec
          ls .\dist\server\_internal\bitsandbytes
          
      - name: Determine tag name
        id: tag
        shell: bash
        run: |
          BUILD_NUMBER="$(git rev-list --count HEAD)"
          SHORT_HASH="$(git rev-parse --short=7 HEAD)"
          if [[ "${{ env.BRANCH_NAME }}" == "master" ]]; then
            echo "name=b${BUILD_NUMBER}" >> $GITHUB_OUTPUT
          else
            SAFE_NAME=$(echo "${{ env.BRANCH_NAME }}" | tr '/' '-')
            echo "name=${SAFE_NAME}-b${BUILD_NUMBER}-${SHORT_HASH}" >> $GITHUB_OUTPUT
          fi
      - name: Pack artifacts
        id: pack_artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        run: |
          7z a SakuraAPI-${{ steps.tag.outputs.name }}-win-cu${{ matrix.alias }}-x64.zip .\dist\server\*
      - name: Upload artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          path: |
            SakuraAPI-${{ steps.tag.outputs.name }}-win-cu${{ matrix.alias }}-x64.zip

  # release:
  #   if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}

  #   runs-on: ubuntu-latest

  #   needs:
  #     - windows-latest-cmake-cublas

  #   steps:
  #     - name: Clone
  #       id: checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Determine tag name
  #       id: tag
  #       shell: bash
  #       run: |
  #         BUILD_NUMBER="$(git rev-list --count HEAD)"
  #         SHORT_HASH="$(git rev-parse --short=7 HEAD)"
  #         if [[ "${{ env.BRANCH_NAME }}" == "master" ]]; then
  #           echo "name=b${BUILD_NUMBER}" >> $GITHUB_OUTPUT
  #         else
  #           SAFE_NAME=$(echo "${{ env.BRANCH_NAME }}" | tr '/' '-')
  #           echo "name=${SAFE_NAME}-b${BUILD_NUMBER}-${SHORT_HASH}" >> $GITHUB_OUTPUT
  #         fi

  #     - name: Download artifacts
  #       id: download-artifact
  #       uses: actions/download-artifact@v3

  #     - name: Create release
  #       id: create_release
  #       uses: anzz1/action-create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ steps.tag.outputs.name }}

  #     - name: Upload release
  #       id: upload_release
  #       uses: actions/github-script@v3
  #       with:
  #         github-token: ${{secrets.GITHUB_TOKEN}}
  #         script: |
  #           const path = require('path');
  #           const fs = require('fs');
  #           const release_id = '${{ steps.create_release.outputs.id }}';
  #           for (let file of await fs.readdirSync('./artifact')) {
  #             if (path.extname(file) === '.zip') {
  #               console.log('uploadReleaseAsset', file);
  #               await github.repos.uploadReleaseAsset({
  #                 owner: context.repo.owner,
  #                 repo: context.repo.repo,
  #                 release_id: release_id,
  #                 name: file,
  #                 data: await fs.readFileSync(`./artifact/${file}`)
  #               });
  #             }
  #           }
